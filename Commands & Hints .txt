Git Benefits 
  1- Version control system
  2- work on branches wit team
Git configuration 
  git config --global user.name ""
  git config --global user.email ""
Git & GitHub Stages 
working Directory -> git add -> Statging Area -> git commit -> Repo -> git push -> Git hub 

Commands 
  git init       (intialize Repo)
  git --version 
  cd             (change directory)
  pwd            (Print Working Directory)(indicates that the current working directory )
  clear
  ls             (list all files in the folder)
  ls -a          (+show hidden files)(Mac & Linux)
  ls -force      (+show hidden files)(powershell)    

  git add <file1><file2><file3> (untracked files -> git add ->Tracked) (put file in staging Phase)
  git status     (no commits yet)
  git commit -m ""
    commit : check point (like game)
  git status -s  (simplify status)(?? -> untracked)
  git add .      (Tracking all files at the same time)
  A -> index added

  git log        (show Repo History)(press many ENTER to show more history)
    press q to end get log 
    8ada75102... => hash (like id)

  git reset HEAD~1        (Undo the commit and unstage the changes:)
  git reset --soft HEAD~1 (Undo the commit but keep the changes staged:)
  git reset --hard HEAD~1 (Undo the commit and discard all changes (permanently delete them))

  git log --oneline       (show that where is the HEAD, master)
  git branch -f master <hash> (by5ly al master 3la al commit aly anta 3awzo)
  HEAD=>Master=>Initail Commit
  HEAD 
    pointer by4awr 3la :::
    al mkan aly anta mawgod feh delwa2ty 
  MASTER / MAIN
    Branch
  
  git rm --cached <file> (from Tracked to Untracked)

  lw 3awz ta5od haga mn version adem w b3den t3mlha copy w b3den trg3 lel version aly anta kont 48al feh w t3mlha paste
1- check that Master on the last commit 
  git log --oneline
  git branch -f master <hash of last commit> (if the master not point to last commit)
2- go back to the old version 
  {make the HEAD point leave the master and go to the node position that has has value}
  git checkout <hash of old version>
  3- copy the content that u need to paste it in the current Version
4- go back to current version (aly howa kan 3ando al master)
  git checkout master 
  {Make the HEAD return back to the master pointer after leaving }
  5- paste the content 

lw 3awz tmsh commit mo3yn 
1- git rebase -i HEAD~3 
2- press esc + i 
3- remove pick and put drop and remove the line that there's no changes
4- press esc + shift + zz 

lw 3awz t8ir asm commit adem t3ml eh https://youtu.be/BNF4le5X1Ms
(m4 3arf azay)

gitignore (tgahol kol al ta8erat 3la file mo3yn)
examples 
1- .env           (this file save the passwrod & API Keys & Secret Data & Database credentials)(Private Data)
2- node_modules/  (Packages)(Big Files)
3- .vscode/       (Personal Settings that's change from Developer to another)

al file dah m4 byb2a untracked la2:::
byb2a akno m4 mawgod asln
1- create .gitignore file
2- put all files that u need to ignored 
  git rm --cached <file name> (to be untracked first)
  al files aly gowa al gitignore: m4 hatb2a la Tracked wla Untracked wla Modified 
  al gitignore nafso hayb2a Untracked

Github - BigBucket - GitLab
1- cloud using like a CV to show ur Projects
2- Teamwork: push & pull the code
lma al lon al pink aly fy al SOURCE CONTROL GRAPH yb2a fo2 khales kda al project kolo marfo3 3la github
lma yb2a fy nodes bl pink w nodes bl blu 
  al pink : marfo3 3la github
  al blue : lsa mat3mlho4 push 3la git hub 

git remote add origin https://github.com/Yahya-yasser/Learn_Git.git
git branch -M main      (change name of branch from master to MAIN)
git push -u origin main (hna b3ml push lel Origin aly howa al URL)
git remote -v           (by2olk al URL aly hat3ml 3leh push w Fetch (pull))

what's the difference between ?
  git push origin main
  git push origin main --force

Branch Meaning (howa pointer m4 node)
git branch (by2olk anta 3ndk kam branch)
 (by default anta 3ndk wahed bs aly howa al *MAIN)
 (asln al branch dah kan asmo MASTER b2a asmo MAIN 8ayrnah w a7na bnrf3 al projcet 3la github)
git branch newBranch 
  (create new branch)
  lma a3ml commit gded al new branch byfdl sabt m4 bythrk zy al HEAD & MAIN
git checkout newBranch 
  34an aruh lel makan aly feh al newBranch mhtag a5ly al head yseb al main w y4awr 3la al newBranch

merge al newBranch m3 al HEAD (al branches al far3ya hya aly byt3mlha dmg m3 al main)
  git log --oneline (34an a3rf al HEAD fen)
  git checkout main (lazm al HEAD => Main not al newBranch)
  git merge newBranch    (merge al newBranch 3la al main)
  resolve Conflict
  git add .
  git commit -m "merge newBranch into main" 
    (HEAD main haytharko le al merged node w al new hayfdl fy mkano)
  git log (check the history)
    (al merged node awl haga)
    (al newBranch)
    (al node aly kan 3ndha al HEAD w al master abl al merge)
    (b3dha bykml 3ady)
  git branch -d newBranch (delete the branch or the pointer)
  (hna bms7 al branch aw al pointer ama alnode aly kan 3ndha al branch btfdl zy mahya)

How to go back in each node and Create branch on int ?
  git checkout <hash of the node>
  git branch NewBranch
    Merge the 2 steps in 1 step (2 ways)

    1-git checkout -b NewBranch <hash node>
      1- create newBranch AT THE SPECIFIC NODE (HAS HAS CODE)
      2- then HEAD => NewBranch

    2-git chekout -b NewBranch 
      1- create NewBranch AT HTE CURRENT NODE
      2- then HEAD => NewBranch
  (tlama mafe4 branch aw pointer 3nd alnode deh maynf4 t3ml git checkout <w asm al commit> ):::
  (lazm t3ml git chekout <hash bta3 asm al commit>)

export repo from github then work on it in Git
  1-Create Repository 
  2-Follow this commands 
    echo "# exam" >> README.md
    git init
    git add README.md
    git commit -m "first commit"
    git branch -M main 
    git remote add origin https://github.com/Yarob50/exam.git
    git push -u origin main

Difference Between C Del vs C Dep
1- continuous Delivery   (tada5ol ba4ry 34an a3ml add new featrue le la Master Website) 
1- continuous Deployment (Automatid - Mafe4 tada5ol ba4ry 34an a3ml add new featrue le la Master Website) 

Git branching Strategies
1- Git Flow 
1- Github Flow
  one project 
  3 Developers in Teamwor
    Developer 1 -> branch 1
    Developer 2 -> branch 2
    Developer 3 -> branch 3
    (hna kol Developer b3ml commit lma y5ls goz mn al featrue)
    (w lma y5lsha 5ales by3mlha merge)
  then integrate 3 branches together (tgme3)
    continuous integration
  then deliver it to (host of server, playstore, ...)
    continuous Delivery

Gitflow strategy
  1-start with 2 branches
    master
    dev
  2- don't delete Master & dev
  3- Master dev synchornization
     - any feature in master must be exits in dev 
     - any feature in dev    must be exits in master
     - al Master w al Dev daymn lazmn yb2o mashyen parallel m3 b3d 
  4- Master Real  webstie
  5- Dev Rractice website
     - bngrb al feature deh 3la al practice website dah w b3den nkkr nhotha fy al real website wla la2
     - Daimn al development byb2a 3la al Dev webstie al awl w b3den al Production byb2a 3la al Master website
  6- Lma a5ls al Testing 3la al Dev 
    (feh tre2ten 34an a3ml merge Dev into Master)
    1-with Release Branch 
    ( s3at feh errors m4 btban fy al Dev 
      fa han3ml branch gded 34an tban feh al errors deh 
      b3den nslh7a b3den n3mlha merge mn al branch algeded dah 
      bhes anna nb2a 2lelna al errors fy al Master website
    )
    {
      - Create NewBranch called Release
      - lw feh ay errors fy al Relase hansl7a w n3ml commits
      - then merge Release into Master
        (hna al master mt2dm 3n al Dev w homa lazm yb2o parallel m3 b3d)
      - merge Master into Dev
      - finally aly mawgod fy al master mawgod fy al dev w al3ks saheh
    }

    2-with Dev Branch Directly 
      - merge Dev into Master
      - finally aly mawgod fy al master mawgod fy al dev w al3ks saheh
  7-hot Fix (afrd Al new Featrures deh 3mlt mo4kla msln fy al Singup fy al Master Productoin website)
   (lazm a7l almo4kla deh bsor3a)
   1-Create new branch from Master called HotFix
   2-Debug the issue 
   3-merge HotFix into Master  (for solve the problem)
   4-Merge Master into Dev     (for synchornization)

Kind Of Branches in Gitflow
1- Master
2- HEAD (asasy kda kda)
3- Dev
4- Features (X Y Z)
5- Release 
6- HotFix

(14.png)Amta al Dev ysb2 al Master 
1- a3ml commit l new featrue 

(15.png)Amta al Master ysb2 al Dev
1- B3dl mo4kla fy alProduction (hotfix)

(16.png)Amta yb2a feh Branch tal3 mn al Dev w sabe2 al master
1-Relase Branch               (lsa mat3mlho4 merge lel master)
2-New Features Branch         (lsa mat3mlho4 merge lel master)

(17.png)Amta yb2a feh Branch tal3 mn al Master w sabe2 al Dev
1-HotFix Branch               (lsa mat3mlho4 merge lel Dev)
    
Immidiate Merge & Request Merge  awl Pull Request 
  -Immidiate : zy ma 3mlna fy al branching exam
  -(pull)Request   : bt5ly nas t3ml testing al awl 3la al feature b3d kda byt3mlha Merge lw al 4o8l mazbot

GitHub Flow
  (adding 3 Features)
  1- Create 3 Branches For X , Y , Z 
  2- Then Commit the Changes
  3- Then Pull Request to accept (hna mafe4 merge)(review by TeamLeader Or Bot )
  4- Then merge to Master After Aceepted
  5-(12.png)(if there's issue after merged to Master)
    HotFix Branch From the node has the issue and fix error then merged to Master Again 

0- hna Mafe4 Practice Environment 
(mafe4 al Dev Branch)(hna al new Featrures b3d ma yt3mlha accept bthth 3latol fy al Master(real Environment))  
(bs Feh PreView Environment aly hya al Pull Request)
1- Remove Dev Branch
2- Depend on Pull Request (GitHub flow)
3- continuous Deployment
  (al GitHub Flow ymel akter lel Deployment m4 al Development hta lw Feh Pull Request aly hya mhtaga tad5ol ba4ry 34an y3ml accept lel Request)
4-(if feature Y depended on feature Z ) u must add Feature Z to Master First and then add Feature Y 

Kind Of Branches in GitHub flow
1- Master
2- Hot Fix & Add New Feature 
  (al hot fix howa howa new Feature) leh b2a ? 
  34an lma byhsl error bsbb Feature x masln batl3 branch gded mn al master asmo hotFix.x byhl al mo4kla b3den b3mlo merge lel master tany

  Trunk based
  1- without Branches (howa al Master bs)
  2- Trank y3ny gz3 y3ny mafe4 branches tanya
  3- No Pull Request (al pull Request byt3ml ben al Branches bs ama hna ana 3ndy al master bs)
  4- push and pull Directly from Master

  Steps to Add new Feature
  0- Nodes saved Globaly in Master
  1- Pull all Nodes From Master (to have copy)
  2- Work on Featrue 
  3- push the Featrue into Master
  4- if there's Confilct (al Git m4 hay5lek t3ml push 8er lma t3ml Resolve lel conflict)

what is the Branch Strategy that have more Branches => Git Flow
what is the Branch Strategy that have less Branches => Trunk based Flow
what is the Best Strategy to use? => (3.png)
what is the Problem of Git Flow? => Merge hill (to many merge operations that's leads it complex)

Open Source Defenition
1- Many Developers bulid Project step by step together
2- https://github.com/Yarob50/First-Contribution-ARABIC | Yarob Rebositary
3- fork (to get copy of the Code)
4- Download In Github Disktop
5- Contibute in the Open source later

Misunderstanding 
1- git config --global core.editor "code --wait"

First node Point to null ::: 34an mafe4 haga ablha t4awr 3leha 
